

#1. Hacer un procedimiento que reciba como parámetro un código de empleado y
#devuelva su nombre.

delimiter //
drop procedure if exists act1//
create procedure act1 (in cod1 int, out nomb1 varchar(50))
begin
	select nombre into nomb1 from empleados where CodigoEmpleado=cod1;
end
//

delimiter ;
call act1(2,@jesucristo);

select @jesucristo as nombre;
select * from empleados;

#2. Hacer un procedimiento que permita borrar un empleado cuyo número se pasará en la
#llamada.

delimiter //
drop procedure if exists act2//
create procedure act2 (cod2 int)
	begin
		delete from empleados where CodigoEmpleado=cod2;
    end
//
delimiter ;
start transaction;
call act2(6);
rollback;



#3. Hacer un procedimiento que modifique la localidad de un CLIENTE. El procedimiento
#recibirá como parámetros el número del empleado y la localidad nueva.



delimiter //

drop procedure if exists act3//
create procedure act3(in cod1 int,in loc1 varchar(50))
begin
    update clientes
    set LineaDireccion1=loc1
    where CodigoCliente=cod1;
end
//
delimiter ;
		#comprobaciones


start transaction;

call act3(1,'C/Rusia');


rollback;

#4. Crear un procedimiento que calcule la cantidad de productos que tenemos en la tabla
#productos, y guarde su valor en una variable local, y luego la visualice.

delimiter //

drop procedure if exists act4//
create procedure act4 ()
begin
	declare var4 int;
	select count(*) into var4 from productos;
    select var4;
end
//
delimiter ;

call act4();


#5.-Crear un procedimiento que visualice los productos que empiecen por una letra que se
#pasa desde la llamada. Uso call buscar_producto(‘f%’); ¿Qué pasaría si no pasamos él %?,
#¿Y cómo lo podríamos solucionar? Pista: usar función concat()

delimiter //

drop procedure if exists act5 //

create procedure act5 (in var5 varchar(70))
begin
 select nombre from productos where nombre like var5;
end
//
delimiter ;

call act5('f%');

# Si no ponemos F% no saldrian los que empiezan, sino solo los que se llaman f, se puede solucionar asi:

delimiter //

drop procedure if exists act5 //

create procedure act5 (in var5 varchar(70))
begin
 select nombre from productos where nombre like concat(var5,'%');
end
//
delimiter ;

call act5('h');



#6.-Modificar el procedimiento anterior, y llámalo con otro nombre para que también
#devuelva el total de productos encontrados, para ello usar un parámetro out.

delimiter //

drop procedure if exists act6 //

create procedure act6 (in var6 varchar(70), out total6 int)
begin
 select nombre from productos where nombre like concat(var6,'%');
 select count(*) into total6 from productos where nombre like concat(var6,'%');
end
//
delimiter ;

call act6('h',@total6);

select @total6;




#7.-Crear un procedimiento almacenado para que liste los clientes ordenados por
#apellidos y nombre. (No hay que pasar ningún parámetro).


delimiter //

drop procedure if exists act7//

create procedure act7 ()
begin
select * from clientes order by apellidocontacto, nombrecontacto;
end
//

delimiter ;

call act7 ();
